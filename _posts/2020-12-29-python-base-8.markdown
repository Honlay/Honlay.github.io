---
layout: post
title: 【Python基础8】数据类型-集合
date: 2020-12-29 08:20:23 +0800
category: Python 
---
# 
集合(set)是一个无序的不重复的元素序列。它的基本用法包括成员检测和消除重复元素。集合对象也支持像 并集，交集，差集，对称差分等数学运算。

可以使用大括号 { } 或者 set() 函数创建集合，注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。

集合不能被切片也不能被索引，除了做集合运算之外，集合元素可以被添加还有删除：
```python
>>> set1 = {'hello','python','hello'}
>>> set1
# 返回结果实现自动去重
{'hello', 'python'}
>>> set2={'乔峰','段誉','虚竹'}
# 判断元素是否在集合内
>>> '乔峰' in set2
True
>>> '杨过' in set2
False
# 添加
>>> set2.add('杨过')
>>> set2
{'乔峰', '段誉', '虚竹', '杨过'}
# 删除
>>> set2.discard('杨过')
>>> set2
{'乔峰', '段誉', '虚竹'}


```
## 1.集合的基本操作
### 1.1 添加元素
**语法:**

`s.add( x )`

将元素 x 添加到集合 s 中，如果元素已存在，则不进行任何操作。
```python
>>> s = {'黄药师','欧阳锋','段智兴','洪七公'}
>>> s.add('王重阳')
>>> s
{'欧阳锋', '段智兴', '黄药师', '王重阳', '洪七公'}

```
还有一个方法，也可以添加元素，且参数可以是列表，元组，字典等，语法格式如下：

`s.update( x )`

x 可以有多个，用逗号分开。
```python
>>> s = {'黄药师','欧阳锋','段智兴','洪七公'}
>>> s.update(['王重阳'])
>>> s
# 返回
{'欧阳锋', '段智兴', '黄药师', '王重阳', '洪七公'}
```

### 1.2 移除元素
**语法:**

`s.remove( x )`

将元素 x 从集合 s 中移除，如果元素不存在，则会发生错误。
```python
>>> s = {'黄药师','欧阳锋','段智兴','洪七公','王重阳'}
>>> s.remove('王重阳')
>>> s
{'欧阳锋', '段智兴', '黄药师', '洪七公'}
```
此外还有一个方法也是移除集合中的元素，且如果元素不存在，不会发生错误。格式如下所示：

`s.discard( x )`
```python
>>> s = {'黄药师','欧阳锋','段智兴','洪七公','王重阳'}
>>> s.discard('王重阳')
>>> s
{'欧阳锋', '段智兴', '黄药师', '洪七公'}
```
也可以设置随机删除集合中的一个元素，语法格式如下：

`s.pop() `
```python
>>> s = {'黄药师','欧阳锋','段智兴','洪七公','王重阳'}
>>> s.pop()
# 返回 '欧阳锋'
>>> s 
{'段智兴', '黄药师', '王重阳', '洪七公'}
```
多次执行测试结果都不一样。
set 集合的 pop 方法会对集合进行无序的排列，然后将这个无序排列集合的左面第一个元素进行删除。

### 1.3 计算集合元素个数
**语法:**

`len(s)`
```python
>>> s = {'黄药师','欧阳锋','段智兴','洪七公','王重阳'}
>>> len(s)
5
```

### 1.4 清空集合
**语法:**

`s.clear()`
```python
>>> s = {'黄药师','欧阳锋','段智兴','洪七公','王重阳'}
>>> s.clear()
>>> s
set()
```

### 1.5 判断元素是否在集合中存在
**语法:**

`x in s`
```python
>>> s = {'黄药师','欧阳锋','段智兴','洪七公','王重阳'}
>>> '黄药师' in s
True
>>> '杨过' in s
False
```

### 1.6 集合运算
集合之间的运算符分别是‘-’、‘|’、‘&’、‘^’ ; 
- '-'：代表前者中包含后者中不包含的元素
- '|'：代表两者中全部元素聚在一起去重后的结果
- '&'：两者中都包含的元素
- '^'：不同时包含于两个集合中的元素

```python
# 集合间的运算
>>> sdyxz={'郭靖','郭啸天','杨康','杨铁心','黄蓉'}
>>> sdxl={'杨过','小龙女','郭靖','黄蓉','尹志平'}
>>> sdyxz
{'黄蓉', '郭啸天', '杨康', '杨铁心', '郭靖'}
>>> sdxl
{'黄蓉', '小龙女', '杨过', '尹志平', '郭靖'}
# 射雕英雄传中包含而神雕侠侣中不包含的人物
>>> sdyxz - sdxl
{'杨康', '杨铁心', '郭啸天'}
# 两部剧中的所有人物
>>> sdyxz | sdxl
{'黄蓉', '小龙女', '郭啸天', '杨过', '杨康', '尹志平', '杨铁心', '郭靖'}
# 两部剧中都出现过的人物
>>> sdyxz&sdxl
{'黄蓉', '郭靖'}
# 两部剧中没有同时出现过的人物
>>> sdyxz ^ sdxl
{'尹志平', '杨铁心', '小龙女', '郭啸天', '杨过', '杨康'}
```
## 2.集合内置方法
### 2.1 add()
为集合添加元素，如果添加的元素在集合中已存在，则不执行任何操作。
```python
>>> s = {'黄药师','欧阳锋','段智兴','洪七公'}
>>> s.add('王重阳')
>>> s
{'欧阳锋', '段智兴', '黄药师', '王重阳', '洪七公'}
```

### 2.2 clear()
clear() 方法用于移除集合中的所有元素。
```python
>>> s = {'黄药师','欧阳锋','段智兴','洪七公','王重阳'}
>>> s.clear()
>>> s
set()
```

### 2.3 copy()
copy() 方法用于拷贝一个集合。
```python
>>> s = {'黄药师','欧阳锋','段智兴','洪七公','王重阳'}
>>> s2 = s.copy()
>>> s2
{'黄药师', '洪七公', '欧阳锋', '王重阳', '段智兴'}
```

### 2.4 difference()
difference() 方法用于返回集合的差集，即返回的集合元素包含在第一个集合中，但不包含在第二个集合(方法的参数)中。

**语法**

`set.difference(set)`
- set -- 必需，用于计算差集的集合
```python
>>> s1={'郭靖','郭啸天','杨康','杨铁心','黄蓉'}
>>> s2={'杨过','小龙女','郭靖','黄蓉','尹志平'}
>>> s3 = s1.difference(s2)
{'杨康', '杨铁心', '郭啸天'}
```

### 2.5 difference_update()
difference_update() 方法用于移除两个集合中都存在的元素。

difference_update() 方法与 difference() 方法的区别在于 difference() 方法返回一个移除相同元素的新集合，而 difference_update() 方法是直接在原来的集合中移除元素，没有返回值。


**语法**

`set.difference_update(set)`
- set -- 必需，用于计算差集的集合
```python
>>> s1={'郭靖','郭啸天','杨康','杨铁心','黄蓉'}
>>> s2={'杨过','小龙女','郭靖','黄蓉','尹志平'}
>>> s1.difference_update(s2)
{'郭啸天', '杨康', '杨铁心'}
```

### 2.6 discard()
discard() 方法用于移除指定的集合元素。

该方法不同于 remove() 方法，因为 remove() 方法在移除一个不存在的元素时会发生错误，而 discard() 方法不会。


**语法**

`set.discard(value)`

```python
>>> s1={'郭靖','郭啸天','杨康','杨铁心','黄蓉'}
>>> s1.discard('郭靖')
>>> s1
{'黄蓉', '郭啸天', '杨康', '杨铁心'}
```

### 2.7 intersection()
intersection() 方法用于返回两个或更多集合中都包含的元素，即交集。

**语法**

`set.intersection(set1, set2 ... etc)`
- set1 -- 必需，要查找相同元素的集合
- set2 -- 可选，其他要查找相同元素的集合，可以多个，多个使用逗号 , 隔开
```python
>>> s1={'郭靖','郭啸天','杨康','杨铁心','黄蓉'}
>>> s2={'杨过','小龙女','郭靖','黄蓉','尹志平'}
>>> s3 = s1.intersection(s2)
>>> s3
{'黄蓉', '郭靖'}
```

### 2.8 intersection_update()
intersection_update() 方法用于获取两个或更多集合中都重叠的元素，即计算交集。

intersection_update() 方法不同于 intersection() 方法，因为 intersection() 方法是返回一个新的集合，而 intersection_update() 方法是在原始的集合上移除不重叠的元素。

**语法**

`set.intersection_update(set1, set2 ... etc)`
- set1 -- 必需，要查找相同元素的集合
- set2 -- 可选，其他要查找相同元素的集合，可以多个，多个使用逗号 , 隔开

```python
>>> s1={'郭靖','郭啸天','杨康','杨铁心','黄蓉'}
>>> s2={'杨过','小龙女','郭靖','黄蓉','尹志平'}
>>> s1.intersection_update(s2)
>>> s1
{'黄蓉', '郭靖'}
```

### 2.9 isdisjoint()
isdisjoint() 方法用于判断两个集合是否包含相同的元素，如果没有返回 True，否则返回 False

**语法**

`set.isdisjoint(set)`
- set -- 必需，要比较的集合

```python
>>> s1={'郭靖','郭啸天','杨康','杨铁心','黄蓉'}
>>> s2={'杨过','小龙女','郭靖','黄蓉','尹志平'}
>>> s1.isdisjoint(s2)
# 包含郭靖和黄蓉所以返回False
False
```

### 2.10 issubset()

issubset() 方法用于判断集合的所有元素是否都包含在指定集合中，如果是则返回 True，否则返回 False。

**语法**

`set.issubset(set)`
- set -- 必需，要比查找的集合

```python
>>> s1={'郭靖','郭啸天','杨康','杨铁心','黄蓉'}
>>> s2={'杨过','小龙女','郭靖','黄蓉','尹志平'}
>>> s1.issubset(s2)
# S1中的所有元素并不全部包含在S2中所以返回False
False
```

### 2.11 issuperset()

issuperset() 方法用于判断指定集合的所有元素是否都包含在原始的集合中，如果是则返回 True，否则返回 False。

**语法**

`set.issuperset(set)`
- set -- 必需，要比查找的集合

```python
>>> s1={'郭靖','郭啸天','杨康','杨铁心','黄蓉'}
>>> s2={'杨过','小龙女','郭靖','黄蓉','尹志平'}
>>> s1.issuperset(s2)
False
```

### 2.12 pop()

pop() 方法用于随机移除一个元素。

**语法**

`set.pop()`

```python
>>> s1={'郭靖','郭啸天','杨康','杨铁心','黄蓉'}
>>> s1.pop()
'黄蓉'
>>> s1
{'郭啸天', '杨康', '杨铁心', '郭靖'}
```

### 2.13 remove()

remove() 方法用于移除集合中的指定元素。

该方法不同于 discard() 方法，因为 remove() 方法在移除一个不存在的元素时会发生错误，而 discard() 方法不会。

**语法**

`set.remove(item)`
- item -- 要移除的元素

```python
>>> s1={'郭靖','郭啸天','杨康','杨铁心','黄蓉'}
>>> s1.remove('郭靖')
>>> s1
{'黄蓉', '郭啸天', '杨康', '杨铁心'}
```

### 2.14 symmetric_difference()

symmetric_difference() 方法返回两个集合中不重复的元素集合，即会移除两个集合中都存在的元素。

**语法**

`set.symmetric_difference(set)`
- set -- 集合

```python
>>> s1={'郭靖','郭啸天','杨康','杨铁心','黄蓉'}
>>> s2={'杨过','小龙女','郭靖','黄蓉','尹志平'}
>>> s3 = s1.symmetric_difference(s2)
>>> s3
{'尹志平', '杨铁心', '小龙女', '郭啸天', '杨过', '杨康'}
```

### 2.15 symmetric_difference_update()

symmetric_difference_update() 方法移除当前集合中在另外一个指定集合相同的元素，并将另外一个指定集合中不同的元素插入到当前集合中。

**语法**

`set.symmetric_difference_update(set)`
- set -- 要检测的集合

```python
>>> s1={'郭靖','郭啸天','杨康','杨铁心','黄蓉'}
>>> s2={'杨过','小龙女','郭靖','黄蓉','尹志平'}
>>> s1.symmetric_difference_update(s2) 
>>> s1
{'小龙女', '郭啸天', '杨过', '杨康', '尹志平', '杨铁心'}
```

### 2.16 union()

union() 方法返回两个集合的并集，即包含了所有集合的元素，重复的元素只会出现一次。

**语法**

`set.union(set1, set2...)`
- set1 -- 必需，合并的目标集合
- set2 -- 可选，其他要合并的集合，可以多个，多个使用逗号 , 隔开。

```python
>>> s1={'郭靖','郭啸天','杨康','杨铁心','黄蓉'}
>>> s2={'杨过','小龙女','郭靖','黄蓉','尹志平'}
>>> s3 = s1.union(s2)
>>> s3
{'黄蓉', '小龙女', '郭啸天', '杨过', '杨康', '尹志平', '杨铁心', '郭靖'}
```

### 2.17 update()

update() 方法用于修改当前集合，可以添加新的元素或集合到当前集合中，如果添加的元素在集合中已存在，则该元素只会出现一次，重复的会忽略。

**语法**

`set.update(set)`
- set -- 必需，可以是元素或集合

```python
>>> s1={'郭靖','郭啸天','杨康','杨铁心','黄蓉'}
>>> s2={'杨过','小龙女','郭靖','黄蓉','尹志平'}
>>> s1.update(s2)
>>> s1 
{'黄蓉', '小龙女', '郭啸天', '杨过', '杨康', '尹志平', '杨铁心', '郭靖'}
```



